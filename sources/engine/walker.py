"""
Walker bot module
"""
import json
import random
import sys

from .books import WalkerBooks
from .captcha2 import *
from .classes import SellerItem, WalkerFight, AUHelper
from .doors import WalkerDoors
from .engine import *


class Walker(Engine):
    """ –î–≤–∏–∂–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ """

    # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è
    VERSION = 3.21

    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞
    GAME_BOT_ID = -182985865

    API_URL = "https://vip3.activeusers.ru/app.php?act=%s&auth_key=%s&group_id=182985865&api_id=7055214"
    ACT_TYPE_PAGE = "pages&id=%s"
    ACT_TYPE_ITEM = "item&id=%s"
    ACT_TYPE_USER = "user"
    API_PAGE_STAT = 615
    API_PAGE_REP = 616

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
    STATE_NONE = 0
    # –í –±–æ—é
    STATE_BATTLE = 1
    # –í –∫–æ–º–Ω–∞—Ç–µ
    STATE_EXPLORE = 2
    # –í –ø–æ—Ö–æ–¥–µ
    STATE_OUTDOOR = 3
    # –ò–¥–µ–º —Å–¥–∞–≤–∞—Ç—å —Ç—Ä–æ—Ñ–µ–∏ –∏ —à–∫—É—Ä—ã
    STATE_DUMP = 4
    # –°–¥–∞—á–∞ —Ç—Ä–æ—Ñ–µ–µ–≤
    STATE_HUNTER_TROPH = 5
    # –ü–æ–∫—É—à–∞—Ç—å
    STATE_HONGER = 6
    # –ù–æ—á–Ω–æ–π –æ—Ç–¥—ã—Ö
    STATE_SLEEP = 7

    # –î—Ä–æ–ø–∞ –Ω–µ—Ç
    DROP_NONE = 0
    # –î—Ä–æ–ø —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
    DROP_WAIT = 1
    # –î—Ä–æ–ø –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    DROP_SKIP = 2

    def __init__(self, config: callable, name: str):
        """ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä """
        super().__init__(config(), name)
        self.active = True
        self.skipBattle = False
        self.nextLevel = False
        self.nextWay = None
        self.trade = None
        self.fight = WalkerFight()
        self.captcha = WalkerCaptcha(os.getcwd() + "/sources/captcha/v2/")
        self.books = WalkerBooks(self.sendAction, self.addrule)
        self.books = WalkerDoors(self.sendAction, self.addrule, self.doWaitRes, self.config)
        self.channel = self.GAME_BOT_ID
        self.drop = self.DROP_NONE
        self.state = self.STATE_NONE
        self.retry = ""
        self.answer = ""
        self.wing = ""
        self.match = []
        self.sells = {}
        self.transfers = {}
        self.actions = {}
        self.tasksList = []
        self.tasksCount = 0
        self.tasksDone = False
        self.tasksDecline = False
        self.injuries = 0
        self.cloaks = 0
        self.speed = 100
        self.honger = 100
        self.hongerTime = datetime.min
        self.inventory = 100
        self.troph = 0
        self.reputation = 0
        self.labData = []
        self.labX = 0
        self.labY = 0
        self.apiInjur = self.compile(r"7c441f6b.+?(\d+)")
        self.apiTroph = self.compile(r"a8137703.+?(\d+)")
        self.apiLevel = self.compile(r"ea8f9b23.+?(\d+)")
        self.apiItems = self.compile(r'<a href=\"/app\.php\?act=item&id=(\d+)&auth_key=\w+&viewer_id=\d+&group_id=\d+&api_id=\d+\" class=\"resitem\">')
        self.apiBooks = self.compile(r'<a href=\"/app\.php\?act=item&id=(\d+)&auth_key=\w+&viewer_id=\d+&group_id=\d+&api_id=\d+\" class=\"resitem\"><div data-toggle=\"tooltip\" data-placement=\"top\" data-html=\"true\" title=\"\" data-original-title=\"–°—Ç—Ä–∞–Ω–∏—Ü–∞ - (.+?)\".+?right\"> (\d+)</span>')
        self.addrule(self.doBackToCitadel, r"üëë–¢–µ–∫—É—â–∏–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å")
        self.addrule(self.doBackToHome, r"–ó–¥–µ—Å—å –ø—Ä–æ–∂–∏–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ")
        self.addrule(self.doBeginHunt, r"‚åõ–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –æ—Ö–æ—Ç—É")
        self.addrule(self.doBeginLabirint, r"^–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç–µ, —á—Ç–æ –∑–∞–ø–ª—É—Ç–∞–ª–∏ –≤–æ –≤—Ä–µ–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
        self.addrule(self.doBeginRuins, r"‚åõ–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –ø–æ–∏—Å–∫–∏")
        self.addrule(self.doBeginWork, r"‚åõ–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        self.addrule(self.doHunterView, r"^üìú–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: (–Ω–µ—Ç|.+?)\b.+?(\d+).+?(\d+)")
        self.addrule(self.doHunterTaskShow, r"^üìå–õ–∏—Å—Ç–æ–∫ –Ω–∞ –¥–æ—Å–∫–µ:.+üìú–¶–µ–ª—å –∑–∞–¥–∞–Ω–∏—è: (.+?)üëù")
        self.addrule(self.doHunterTaskAccept, r"^‚úÖ–ó–∞–¥–∞–Ω–∏–µ .+? –ø—Ä–∏–Ω—è—Ç–æ")
        self.addrule(self.doHunterTroph, r"^–ö–∞–∫–∏–µ —Ç—Ä–æ—Ñ–µ–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å")
        self.addrule(self.doHunterStats, r"^–ü—Ä–∏–≤—Ä–∞—Ç–Ω–∏–∫ –≥–æ—Ç–æ–≤.+?(–ó–µ–ª—å–µ —Å–∏–ª—ã) - (\d+).+?(–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏) - (\d+).+?(–ó–µ–ª—å–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏) - (\d+).+?üìú–¢–µ–∫—É—â–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: (\d+)")
        self.addrule(self.doCaptchaWall, r"–°–≤–µ—á–∏ –æ—Å–≤–µ—â–∞—é—Ç –ø—è—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
        self.addrule(self.doCaptchaComing, r"^–ü–æ–ª –ø–æ–¥ –í–∞–º–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
        self.addrule(self.doCaptchaSend, r"^–£ –í–∞—Å –µ—Å—Ç—å –º–∏–Ω—É—Ç–∞, —á—Ç–æ–±—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏")
        self.addrule(self.doCloakLow, r"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä—è–¥–æ–≤ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏: (\d+)")
        self.addrule(self.doClosedDoor, r"–ù–∞ –¥–≤–µ—Ä–∏ –∏–º–µ–µ—Ç—Å—è —É–≥–ª—É–±–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–∞–∫–æ–≥–æ-—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞")
        self.addrule(self.doControlStart, r"–≤–∞–ª–ª–∏ —Å—Ç–∞—Ä—Ç")
        self.addrule(self.doControlStop, r"–≤–∞–ª–ª–∏ —Å—Ç–æ–ø")
        self.addrule(self.doControlBooks, r"–≤–∞–ª–ª–∏ –∫–Ω–∏–≥–∏")
        self.addrule(self.doControlDrop, r"–≤–∞–ª–ª–∏ —Å–¥–∞–π")
        self.addrule(self.doDice, r"–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã: –í—ã –∫–∏–¥–∞–µ—Ç–µ –∫–æ—Å—Ç–∏")
        self.addrule(self.doExplore, r"^üö©–õ–æ–∫–∞—Ü–∏—è:.+?üíÄ–¢—Ä–æ—Ñ–µ–µ–≤: (\d+).üíöHP: (\d+)\/(\d+).+?(\d+)%")
        self.addrule(self.doExploreSpeed, r"^üß≠–°–∫–æ—Ä–æ—Å—Ç—å.+?(\d+)%(.+?üëÅ–ö–∞–∂–µ—Ç—Å—è)?")
        self.addrule(self.doExploreDrop, r"–ë–æ–ª—å—à–µ –∑–¥–µ—Å—å –Ω–µ—á–µ–≥–æ –¥–æ–±—ã—Ç—å")
        self.addrule(self.doFarmCoat, r".+? –ø–æ–∫–æ–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –í–∞–º–∏")
        self.addrule(self.doFarmHerb, r"^.–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç–µ (–∞–¥—Å–∫–∏–π)*.+")
        self.addrule(self.doFarmRes, r"^.–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ (?:–ø–æ–¥—Ö–æ–¥—è—â–∏–π|–ª–µ–Ω|–ø–æ–¥—Ö–æ–¥—è—â–µ–µ|–Ω–µ–±–æ–ª—å—à—É—é)")
        self.addrule(self.doFarmView, r"^[üó≥üíÄüõ°‚öîüìöüèÆ]–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏")
        self.addrule(self.doFightDead, r"^üñ§–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ç—Ä–∞–≤–º—É")
        self.addrule(self.doFightEnd, r"(?:(üñ§–ì—Ä—É–±—ã–º —É–¥–∞—Ä–æ–º).+?)?–ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        self.addrule(self.doFightOnePunch, r"^üö´–í—ã –æ–≥–ª—É—à–µ–Ω—ã –≥—Ä–æ–º–∫–∏–º —Ä—ã–∫–æ–º")
        self.addrule(self.doFightOneSkill, r"^üö´–£ –í–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏")
        self.addrule(self.doFightOneSkill, r"^‚ùå–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        self.addrule(self.doFightOneSkill, r"^‚ùì–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏")
        self.addrule(self.doFightOneSkill, r"^üî•–í–∞—à —Ñ–∞–∫–µ–ª —Å–≤–µ—Ç–∏—Ç –æ—á–µ–Ω—å —è—Ä–∫–æ")
        self.addrule(self.doFightOneSkill, r"^üñ§–í—ã –Ω–∞–Ω–µ—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É")
        self.addrule(self.doFightOneSkill, r"^üõ°–í—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å –ø—Ä–∏–Ω—è—Ç—å —É–¥–∞—Ä –Ω–∞ —â–∏—Ç")
        self.addrule(self.doFightOneSkill, r"^ü§¢–í—ã –æ—Ç—Ä–∞–≤–∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
        self.addrule(self.doFightOneSkill, r"üèÆ–í—ã –≤—ã–ø–∏–ª–∏ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏")
        self.addrule(self.doFightNoBag, r"^–£ –í–∞—Å –Ω–µ—Ç –∑–µ–ª–∏–π")
        self.addrule(self.doFightNoBag, r"^–£ –í–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–µ–ª–∏–π")
        self.addrule(self.doFightNext, r"üé≤–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥")
        self.addrule(self.doFightNext, r"üè≥–í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è")
        self.addrule(self.doFightPvpSkip, r"^üè≥–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–µ–¥–∏–Ω–∫–∞")
        self.addrule(self.doFightPvp, r"^(?:üë•–ì–∏–ª—å–¥–∏—è: (.+?)|üë§–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: .+?)$.+?(?:–•–∞—Ä-–∫–∏: ‚öî(\d+) üõ°(\d+)%.+?)?%.+?: üéØ(\d+)% üí´(\d+)%.+?‚ù§(?:HP|–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫): (\d+)\/(\d+)(?: \((.?\d+)\))*.+?(\d+)%.+?üíö(?:HP|–ü–µ—Ä—Å–æ–Ω–∞–∂): (\d+)\/(\d+)(?: \((.?\d+)\))*.+?(\d+)%(.+?üé≤–í–∞—à —Ö–æ–¥)?")
        self.addrule(self.doFightPve, r"^‚ù§.+?: (\d+)/(\d+).+?(\d+)%.‚öî(\d+) üõ°(\d+)% üí´\d+% (.)(\d+)%..üíö.+?: (\d+)/(\d+).+?(\d+)%.üëû\d+% üõ°\d+% üí´(\d+)% üéØ(\d+)%")
        self.addrule(self.doFightStep, r"(?:–í–∞—à–∞ —Ç–æ—á–Ω–æ—Å—Ç—å \(üéØ(\d+)% üí´(\d+)%\).+)?(‚õî–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ª–æ–≤–∫–æ.+?)?(?:—É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ \d+% –¥–æ –∫–æ–Ω—Ü–∞ –±–æ—è \((\d+)%\).+)?(?:—Ä–∞—Å–∫–æ–ª–æ–ª–∏ –µ–≥–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É \(üõ°(\d+)%\).+?)?(?:(‚öî–ù–∞–≤—è–∑–∞–≤ –í–∞–º).+?)?(?:(üñ§–ì—Ä—É–±—ã–º).+?)?(?:(üñ§–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫).+?)?(?:(üó£–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫).+?)?‚ù§(?:HP|–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫): (\d+)\/(\d+)(?: \((.?\d+)\))*.+?(\d+)%.+?üíö(?:HP|–ü–µ—Ä—Å–æ–Ω–∞–∂): (\d+)\/(\d+)(?: \((.?\d+)\))*.+?(\d+)%(.+?üé≤–í–∞—à —Ö–æ–¥)?")
        self.addrule(self.doFightStand, r"^‚öî–í—ã –ø—Ä–∏–Ω—è–ª–∏ .+?—Ç–æ–π–∫—É (?:–¥–ª—è .+? \(üéØ(\d+)%\))?")
        self.addrule(self.doFisher, r"–ù–∞–∂–∏–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: (\d+)")
        self.addrule(self.doFisherFound, r"–ü–æ–ø–ª–∞–≤–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—à–µ–ª –ø–æ–¥ –≤–æ–¥—É")
        self.addrule(self.doFisherLeave, r"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä—ã–±–∞–ª–∫—É")
        self.addrule(self.doGoblin, r"–í —Ç–µ–º–Ω–æ–º –∑–∞–ª–µ –í–∞–º –ø–æ–≤—Å—Ç—Ä–µ—á–∞–ª—Å—è —à—É—Å—Ç—Ä—ã–π –≥–æ–±–ª–∏–Ω")
        self.addrule(self.doInHome, r"^üíñ–û—Ç–¥—ã—Ö –≤ –¥–æ–º–µ")
        self.addrule(self.doInjuriesStationary, r"^üíñ–í—Å–µ —Ç—Ä–∞–≤–º—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–ª–µ—á–µ–Ω—ã")
        self.addrule(self.doInjuriesPartial, r"^üíñ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–ª–µ—á–∏–ª–∏ (\d+) —Ç—Ä–∞–≤–º")
        self.addrule(self.doInjuriesFull, r"^üíñ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–ª–µ—á–∏–ª–∏ –≤—Å–µ —Å–≤–æ–∏ —Ç—Ä–∞–≤–º—ã")
        self.addrule(self.doInjuriesOne, r"^üëù–í—ã —Å–æ–±—Ä–∞–ª–∏ –∏ —Å—ä–µ–ª–∏: üåº–ñ–∏–∑–Ω–µ—Ü–≤–µ—Ç")
        self.addrule(self.doInjuriesUpdate, r"^–í–∞–º —Å—Ç–∞–ª–æ –ª—É—á—à–µ.+?üñ§–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤–º: (\d+)")
        self.addrule(self.doKitchenDone, r"^–ü–ª–æ—Ç–Ω–æ –ø–æ–¥–∫—Ä–µ–ø–∏–≤—à–∏—Å—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π –≤–æ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –µ–¥–æ–π")
        self.addrule(self.doKitchenLeave, r"^‚åõ–®–∞–Ω—Å –ø–æ–≤—ã—à–µ–Ω–∏—è")
        self.addrule(self.doLabirint, r"üß≠ –í–µ—Ç–µ—Ä –¥—É–µ—Ç –æ—Ç–∫—É–¥–∞-—Ç–æ —Å (.+?)\.")
        self.addrule(self.doLabirint, r"üß≠ –í–µ—Ç–µ—Ä –±–µ—Ä–µ—Ç –Ω–∞—á–∞–ª–æ")
        self.addrule(self.doLabirint, r"üß≠ –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–µ—Ç—Ä–∞ —Å–æ–≤—Å–µ–º")
        self.addrule(self.doLeaveBattle, r"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –±–∏—Ç–≤—É")
        self.addrule(self.doLeaveFontan, r"^‚åõ–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞.+?üñ§–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤–º: (\d+)")
        self.addrule(self.doLeaveHealing, r"–ò—Å—Å–ª–µ–¥—É—è –ø–æ–¥–∑–µ–º–Ω—ã–µ –∫–æ—Ä–∏–¥–æ—Ä—ã, –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Ü–µ–ª–µ–±–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
        self.addrule(self.doLeaveHunt, r"‚ùå–ù–∞ —ç—Ç–æ–π –ø–æ–ª—è–Ω–µ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–±—ã—á–∏")
        self.addrule(self.doLeaveLabirint, r"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        self.addrule(self.doLeaveRuins, r"^‚ùå–í —ç—Ç–∏—Ö —Ä—É–∏–Ω–∞—Ö –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–±—ã—á–∏")
        self.addrule(self.doLeaveSomething, r"^–ó–∞–≤–∞–ª —Ä–∞–∑–æ–±—Ä–∞–Ω")
        self.addrule(self.doLeaveSomething, r"^–û—Å–∫–æ–ª–∫–∏ —Å–æ–±—Ä–∞–Ω—ã")
        self.addrule(self.doLeaveSomething, r"–†—É–¥–∞ –¥–æ–±—ã—Ç–∞")
        self.addrule(self.doLevel, r"‚åõ–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        self.addrule(self.doMushroom, r"^üëù–í—ã —Å–æ–±—Ä–∞–ª–∏ –∏ —Å—ä–µ–ª–∏: (?:üçÑ–ü–µ—â–µ—Ä–Ω—ã–π –≥—Ä–∏–±.+?üíöHP: (\d+)/(\d+).+?(\d+)%)?")
        self.addrule(self.doNextLevel, r"^üö´–í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–±—ã—á–∏ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ —Ç–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è")
        self.addrule(self.doFlower, r"^üëù–í—ã —Å–æ–±—Ä–∞–ª–∏ –∏ —Ä–∞—Å–∫—Ä—ã–ª–∏: üå∑–¶–≤–µ—Ç–æ–∫ –≥–ª—É–±–∏–Ω")
        self.addrule(self.doOutdoorBreak, r"–ë–æ–ª—å —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç –í–∞—Å –Ω–∞ —á–∞—Å—Ç–∏")
        self.addrule(self.doOutdoorBreak, r"–ö–∞–∂–µ—Ç—Å—è, –∫–æ–Ω–µ—Ü –±–ª–∏–∑–æ–∫")
        self.addrule(self.doOutdoorBreak, r"–ú–µ—Å—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å–µ –æ–ø–∞—Å–Ω–µ–µ –∏ –æ–ø–∞—Å–Ω–µ–µ")
        self.addrule(self.doOutdoorBreak, r"–ù–æ–≥–∏ –¥—Ä–æ–∂–∞—Ç –æ—Ç –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏—è –±–µ–¥—ã")
        self.addrule(self.doOutdoorBreak, r"–ù—É–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º")
        self.addrule(self.doOutdoorBreak, r"–° –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º —á—É–≤—Å—Ç–≤–æ —Ç—Ä–µ–≤–æ–≥–∏ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç")
        self.addrule(self.doOutdoorBreak, r"–°–º–µ—Ä—Ç—å —Ç–∞–∏—Ç—Å—è –∑–∞ –∫–∞–∂–¥—ã–º –ø–æ–≤–æ—Ä–æ—Ç–æ–º")
        self.addrule(self.doOutdoorBreak, r"–°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–æ–∂–Ω–æ —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –¥–æ—Ä–æ–≥—É –≤–ø–µ—Ä–µ–¥–∏")
        self.addrule(self.doOutdoorBreak, r"–ß—É–≤—Å—Ç–≤–æ —Ç—Ä–µ–≤–æ–≥–∏ –±—å–µ—Ç –≤ –∫–æ–ª–æ–∫–æ–ª")
        self.addrule(self.doOutdoorStep, r"‚åõ–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")
        self.addrule(self.doOutdoorStep, r"‚åõ–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
        self.addrule(self.doResp, r"^üíÄ–ë–ª–∞–≥–æ–¥–∞—Ä—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ–∂–∏—Ç–∏")
        self.addrule(self.doResp, r"^üî•–ë–ª–∞–≥–æ–¥–∞—Ä—è –ø–∞—Å—Å–∏–≤–Ω–æ–º—É —É–º–µ–Ω–∏—é")
        self.addrule(self.doRest, r"^‚åõ–í—ã –ø—Ä–∏—Å–µ–ª–∏ —É –∫–æ—Å—Ç—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.addrule(self.doRetrySend, r"‚åõ–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ")
        self.addrule(self.doSmug, r"–ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç –≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å –≤—Å–µ")
        self.addrule(self.doTaskDone, r"üìú–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏")
        self.addrule(self.doTradeTown, r"^–í –ø–æ—Ä—Ç–æ–≤–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ –≤—Å–µ–≥–¥–∞ –∫–∏–ø–∏—Ç –∂–∏–∑–Ω—å")
        self.addrule(self.doTradeTavern, r"^–°–Ω—è—Ç—å –∫–æ–º–Ω–∞—Ç—É - \d+ –∑–æ–ª–æ—Ç–∞")
        self.addrule(self.doTradeSleep, r"^–ö–æ–º–Ω–∞—Ç—ã —É–±—Ä–∞–Ω—ã! –í–æ –≤—Ä–µ–º—è —Ä–∞–∑–±–æ—Ä–∞")
        self.addrule(self.doTradeMenu, r"^üìú–ú–µ–Ω—é —Ç–∞–≤–µ—Ä–Ω—ã")
        self.addrule(self.doTradeMenuAccept, r"üíñ–ü–µ—Ä–µ–∫—É—Å–∏–≤, –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ")
        self.addrule(self.doTradeMenuDecline, r"^üö´–ï–¥–∞ –Ω–∞ –∫—É—Ö–Ω–µ.+?‚åõ–û—Å—Ç–∞–ª–æ—Å—å: (?:(\d+) —á–∞—Å\. )?(?:(\d+) –º–∏–Ω\. )?(?:(\d+) —Å–µ–∫\.)?")
        self.addrule(self.doTrader, r"–ú—Ä–∞—á–Ω–æ–≥–æ –≤–∏–¥–∞ —Ç–æ—Ä–≥–æ–≤–µ—Ü –∑–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–∞–≤–∫–æ–º")
        self.addrule(self.doTrapEasy, r"üëû–ò—Å—Å–ª–µ–¥—É—è –∫–æ—Ä–∏–¥–æ—Ä, –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –ª–æ–≤—É—à–∫—É\. –û–¥–Ω–∞–∫–æ, –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–æ–≤–∫–æ—Å—Ç–∏ –∏ —É–¥–∞—á–µ, –í–∞–º —É–¥–∞–ª–æ—Å—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–Ω–∞\.")
        self.addrule(self.doTrapHard, r"–í—ã –ø–µ—Ä–µ–∂–∏–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–Ω, –Ω–æ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è")
        self.addrule(self.doTreasureChest, r"–ë–ª—É–∂–¥–∞—è –ø–æ –∫–æ—Ä–∏–¥–æ—Ä–∞–º, –≤—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–µ–º")
        self.addrule(self.doTreasureWall, r"üåï–í –Ω–µ–±–æ–ª—å—à–æ–π —Ç—Ä–µ—â–∏–Ω–µ –≤ —Å—Ç–µ–Ω–µ")
        self.addrule(self.doUseBottle, r"–£ –í–∞—Å –Ω–∞ –ø–æ—è—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å (\d+) –∑–µ–ª–∏–π")
        self.addrule(self.doUseStand, r"^üó°–¢–µ–∫—É—â–∏–π —Ç–∏–ø —É–¥–∞—Ä–æ–≤:")
        self.addrule(self.doWaterHerbPour, r"–í —Ü–µ–Ω—Ç—Ä–µ —Ä–æ—â–∏ –≤–∏–¥–Ω–µ–µ—Ç—Å—è –Ω–µ–¥–∞–≤–Ω–æ")
        self.addrule(self.doWaterHerbWait, r"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–∑–¥–∞–Ω–Ω—É—é –≤–æ–¥—É")
        self.addrule(self.doWaterHerbLeave, r"üö´–£ –í–∞—Å –Ω–µ—Ç –ø–µ—Ä–≤–æ–∑–¥–∞–Ω–Ω–æ–π –≤–æ–¥—ã")
        self.addrule(self.doWaterHerbLeave, r"–í—ã –≤—ã—Ä–∞—Å—Ç–∏–ª–∏ –∏ —Å–æ–±—Ä–∞–ª–∏")
        self.addrule(self.doZeroInventory, r"üîì–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: (\d+)")
        self.caption("Walker v%s Py v%s" % (self.VERSION, sys.version), True)
        self.config.seller(self.regSell)
        self.config.transfer(self.regTransfer)
        self.thread(self.check)

    def check(self):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞ """
        if self.trade and self.trade(self.event):
            return
        # –ü—Ä–∏–∑–Ω–∞–∫–∏
        tmp_control = (self.event.peer_id == self.config.alertID) or (self.event.peer_id == self.config.selfID)
        tmp_game = (self.event.peer_id == self.GAME_BOT_ID)
        # –°–æ—Ö—Ä–∞–Ω–∏–º –∫–Ω–æ–ø–æ—á–∫–∏
        if tmp_game:
            self.saveActions()
        elif not tmp_control:
            return
        # –í—ã–π–¥–µ–º –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if (not self.active) and (not tmp_control):
            return
        # –ü–µ—Ä–µ–±–µ—Ä–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è
        if not self.work(True):
            return
        # –ó–∞–º–µ–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.caption("‚ô•:%s M:%s I:%s T:%s - v%s" % (self.injuries, self.cloaks, self.inventory, self.troph, self.VERSION))

    def wait(self, extended: bool = False):
        """ –û–∂–∏–¥–∞–Ω–∏–µ –∫–≤–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ """
        tmp_time = random.randint(self.config.waitMin, self.config.waitMax) // 1000
        # –î–ª—è –≤—ã—Ö–æ–¥–∞ —Å –∫–æ–º–Ω–∞—Ç—ã –∂–¥–µ–º –ø–æ–¥–æ–ª—å—à–µ
        if extended:
            self.sleep(tmp_time * 4, "–≤—ã—Ö–æ–¥–∞ —Å –∫–æ–º–Ω–∞—Ç—ã")
        else:
            self.sleep(tmp_time, "–æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    def sendAction(self, text: str, force: bool = False):
        """ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è """
        self.wait()
        self.retry = text
        if force or text in self.actions:
            self.send(text)
        else:
            print(self.actions)
            self.alert("Walker wrong action " + text)
        # –í—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ
        return True

    def saveActions(self):
        """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π """
        if not hasattr(self.event, "keyboard"):
            return
        # –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if not ("inline" in self.event.keyboard):
            self.actions = {}
        # –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç - –≤—ã—Ö–æ–¥–∏–º
        if not ("buttons" in self.event.keyboard):
            return
        # –ü–µ—Ä–µ–ø–∏—à–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        for tmpButtonLines in self.event.keyboard["buttons"]:
            for tmpButton in tmpButtonLines:
                self.actions[tmpButton["action"]["label"]] = tmpButton["color"]
        return

    def goPortal(self, state: int = STATE_DUMP):
        """ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ø–æ—Ä—Ç–∞–ª """
        self.updateInjuries(False)
        self.state = state
        self.log("–§–ª–∞–≥: %s —Ç—Ä–∞–≤–º—ã: %s –º–∞—Å–∫–∞: %s —Ä—é–∫–∑–∞–∫: %s —Ç—Ä–æ—Ñ–µ–∏: %s" % (
            self.state, self.injuries, self.cloaks, self.inventory, self.troph))
        self.sendAction("–í –ø–æ—Ä—Ç–∞–ª")

    def regSell(self, itemid: int, name: str, action: int):
        """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—É–ø–∫–∏ """
        tmp_item = SellerItem()
        tmp_item.id = itemid
        tmp_item.name = name
        tmp_item.action = action
        # –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—à —Å–ø–∏—Å–æ—á–µ–∫
        self.sells[itemid] = tmp_item

    def regTransfer(self, itemid: int, name: str, action: int):
        """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—É–ø–∫–∏ """
        tmp_item = SellerItem()
        tmp_item.id = itemid
        tmp_item.name = name
        tmp_item.action = action
        # –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—à —Å–ø–∏—Å–æ—á–µ–∫
        self.transfers[itemid] = tmp_item

    def checkMaps(self):
        """ –û—á–∏—Å—Ç–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è """
        if not self.config.api:
            return
        # –°–æ–±–µ—Ä–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Ä—é–∫–∑–∞–∫–∞
        tmp_items = self.apiItems.findall(self.apiUser())
        if not tmp_items:
            return
        # –°–∫—É—à–∞–µ–º / –ø—Ä–æ–¥–∞–¥–∏–º
        for tmp_item in tmp_items:
            if not (tmp_item in self.sells):
                continue
            tmp_sell = self.sells[tmp_item]
            self.apiSell(tmp_sell.id, tmp_sell.action, tmp_sell.name)
            self.sleep(3, "—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
        # –í—ã–ø–æ–ª–Ω–∏–º –∫–∞—Ä—Ç—É
        for tmp_item in tmp_items:
            # –ö–∞—Ä—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if tmp_item == "14663" and self.injuries >= self.config.injuriesForFountain:
                return self.apiSell(tmp_item, 0, "–ö–∞—Ä—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            # –ö–∞—Ä—Ç–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
            if tmp_item == "14664":
                return self.apiSell(tmp_item, 0, "–ö–∞—Ä—Ç–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
            # –ö–∞—Ä—Ç–∞ —Ä—É–∏–Ω
            if tmp_item == "14963" and self.config.searching:
                return self.apiSell(tmp_item, 0, "–ö–∞—Ä—Ç–∞ —Ä—É–∏–Ω")
            # –ö–∞—Ä—Ç–∞ —É–≥–æ–¥–∏–π
            if tmp_item == "14662" and self.config.hunting:
                return self.apiSell(tmp_item, 0, "–ö–∞—Ä—Ç–∞ —É–≥–æ–¥–∏–π")
            # –ö–∞—Ä—Ç–∞ –æ–∑–µ—Ä–∞
            if tmp_item == "14660":
                return self.apiSell(tmp_item, 0, "–ö–∞—Ä—Ç–∞ –æ–∑–µ—Ä–∞")
            # –ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â
            if tmp_item == "14661":
                return self.apiSell(tmp_item, 0, "–ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â")

    def buildBooks(self):
        """ –°–±–æ—Ä –≤—Å–µ—Ö –∫–Ω–∏–≥ """
        if not self.config.api:
            return
        # –°–æ–±–µ—Ä–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Ä—é–∫–∑–∞–∫–∞
        tmp_items = self.apiBooks.findall(self.apiUser())
        if not tmp_items:
            return
        # –°–∫—É—à–∞–µ–º / –ø—Ä–æ–¥–∞–¥–∏–º
        tmp_find: SellerItem
        for tmp_item in tmp_items:
            for tmp_find in self.transfers.values():
                if tmp_item[1] == tmp_find.name:
                    if tmp_find.action != 1:
                        continue
                    if int(tmp_item[2]) < 5:
                        continue
                    if not self.apiScrolls(tmp_item[0], tmp_find.name):
                        self.alert("- —Å–±–æ—Ä –≤—Å—Ç–∞–ª")
                        return
                    self.sleep(10, "—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ–Ω—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
                    break
        self.alert("+ —Å–±–æ—Ä –∑–∞–∫–æ–Ω—á–µ–Ω")

    def dropItems(self):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ """
        if not self.config.api:
            return
        # –°–æ–±–µ—Ä–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Ä—é–∫–∑–∞–∫–∞
        tmp_items = self.apiItems.findall(self.apiUser())
        if not tmp_items:
            return
        # –°–∫—É—à–∞–µ–º / –ø—Ä–æ–¥–∞–¥–∏–º
        tmp_dict = {}
        for tmp_item in tmp_items:
            if tmp_item in self.transfers:
                if not (tmp_item in tmp_dict):
                    tmp_dict[tmp_item] = 1
                else:
                    tmp_dict[tmp_item] += 1
        for tmp_item in tmp_dict:
            tmp_transfer = self.transfers[tmp_item].name.lower()
            tmp_count = tmp_dict[tmp_item]
            if tmp_count == 1:
                if not self.send("–ø–µ—Ä–µ–¥–∞—Ç—å %s" % tmp_transfer, self.config.storageChannel, self.config.storageMessage):
                    self.alert("- –ø–µ—Ä–µ–¥–∞—á–∞ –≤—Å—Ç–∞–ª–∞")
                    return
            else:
                if not self.send("–ø–µ—Ä–µ–¥–∞—Ç—å %s - %s —à—Ç—É–∫" % (tmp_transfer, tmp_count), self.config.storageChannel, self.config.storageMessage):
                    self.alert("- –ø–µ—Ä–µ–¥–∞—á–∞ –≤—Å—Ç–∞–ª–∞")
                    return
            self.sleep(random.randint(10000, 20000) // 1000, "–ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π")
        self.alert("+ —Å–¥–∞—á–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")

    def updateInjuries(self, add: bool):
        """ –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–≤–º """
        if add:
            self.injuries += 1
        # –£—Ç–æ—á–Ω–∏–º —É api
        if self.config.api and self.injuries >= self.config.injuriesForHome:
            self.injuries = self.apiResult(self.apiInjur, self.apiUser)

    def getStand(self):
        """ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–π–∫–∞ –≤ –±–æ—é """
        for tmp_button in self.actions:
            if tmp_button[0] == "#":
                return tmp_button
        return None

    def apiSell(self, itemid: str, action: int, name: str):
        """ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ """
        tmp_data = {
            "id": itemid,
            "m": action
        }
        tmp_referer = self.API_URL % (self.ACT_TYPE_ITEM % itemid, self.config.api)
        tmp_url = self.API_URL % ("a_sell_item", self.config.api)
        # –û—Ç–ø—Ä–∞–≤–∏–º
        tmp_response = requests.post(tmp_url, tmp_data, headers=AUHelper.buildHeaders(7 + len(itemid), tmp_referer))
        if tmp_response.ok:
            self.inventory -= 1
            self.log("%s —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - %s" % (name, tmp_response.text))
            return True
        else:
            self.log("%s –Ω–µ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - %s" % (name, tmp_response.reason))
            return False

    def apiScrolls(self, itemid: str, name: str):
        """ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ """
        # –û—Ç–∫—Ä–æ–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        tmp_referer = self.API_URL % (self.ACT_TYPE_ITEM % itemid, self.config.api)
        tmp_response = requests.get(self.API_URL % (self.ACT_TYPE_ITEM % itemid, self.config.api), headers=AUHelper.buildHeaders(0, tmp_referer))
        if not tmp_response.ok:
            return False
        # –°—á–∏—Ç–∞–µ–º –∑–∞—â–∏—Ç—É
        tmp_params = json.loads(re.search(r"window.pv644 = ({.+})", tmp_response.text)[1])
        tmp_params = {
            "code": "51153l29le090c096fb1a4093",
            "pwid": "w_173",
            "context": 1,
            "hash": "",
            "channel": "",
            "vars": tmp_params
        }
        tmp_params = AUHelper.buildQuery(tmp_params)
        tmp_response = requests.post(self.API_URL % ("a_program_run", self.config.api), tmp_params, headers=AUHelper.buildHeaders(len(tmp_params), tmp_referer))
        if not tmp_response.ok:
            return False
        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–±–æ—Ä –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        tmp_params = {
            "ch": "u" + str(self.config.selfID),
            "text": "–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏",
            "context": 1,
            "messages[0][message]": "–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏",
            "bid": "w_173"
        }
        tmp_url = self.API_URL % ("a_program_say", self.config.api)
        tmp_params = AUHelper.buildQuery(tmp_params)
        tmp_response = requests.post(tmp_url, tmp_params, headers=AUHelper.buildHeaders(len(tmp_params), tmp_referer))
        if not tmp_response.ok:
            return False
        # –ß–µ—Ä–µ–∑ –ø–∞—É–∑—É –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
        self.sleep(1, "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        tmp_response = requests.post(tmp_url, tmp_params, headers=AUHelper.buildHeaders(len(tmp_params), tmp_referer))
        if tmp_response.ok:
            self.inventory += 1
            self.log("%s —Å–æ–±—Ä–∞–Ω–æ - %s" % (name, tmp_response.text))
            return True
        else:
            self.log("%s –Ω–µ —Å–æ–±—Ä–∞–Ω–æ - %s" % (name, tmp_response.reason))
            return False

    def apiLoad(self, page: str):
        """ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã API """
        tmp_url = self.API_URL % (page, self.config.api)
        self.log("–ì—Ä—É–∑–∏–º —Å—Å—ã–ª–∫—É %s" % tmp_url)
        # –ó–∞–≥—Ä—É–∑–∏–º
        return requests.get(tmp_url).text

    def apiStat(self):
        """ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ """
        return self.apiLoad(self.ACT_TYPE_PAGE % self.API_PAGE_STAT)

    def apiRep(self):
        """ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã API –¥–ª—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ """
        return self.apiLoad(self.ACT_TYPE_PAGE % self.API_PAGE_REP)

    def apiUser(self):
        """ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã API —Ä—é–∫–∑–∞–∫–∞ """
        return self.apiLoad(self.ACT_TYPE_USER)

    def apiResult(self, regex: re, func: callable):
        """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ API –≤—ã–±–æ—Ä–∫–∏ """
        tmp_match = regex.search(func())
        if tmp_match:
            return self.toInt(tmp_match[1])
        else:
            return 0

    def doCaptchaComing(self, _match: []):
        """ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∫–∞–ø—á–∏ """
        if not self.config.api:
            return self.alert("–ö–∞–ø—á–∞")
        # –ï—Å–ª–∏ –∞–ø–∏ –µ—Å—Ç—å - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º
        tmpUrl = self.getphoto(self.GAME_BOT_ID, self.event.message_id, 1172)
        if tmpUrl:
            self.answer = self.captcha.fromurl(tmpUrl)
        else:
            self.alert("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ
        if self.answer:
            self.log("–ö–∞–ø—á–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ %s" % self.answer)
        else:
            self.alert("–ö–∞–ø—á–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

    def doCaptchaWall(self, _match: []):
        """ –ö–∞–ø—á–∞ """
        if self.answer:
            self.sendAction("–ü–æ–¥–æ–π—Ç–∏ –∫ –ø–ª–∏—Ç–∞–º")

    def doCaptchaSend(self, _match: []):
        """ –í–≤–æ–¥ –∫–∞–ø—á–∏ """
        if not self.answer:
            return
        # –î–æ–ª–≥–æ –ø–æ–¥–æ–∂–¥–µ–º
        self.log("–î–µ–ª–∞–µ–º –≤–∏–¥ —á—Ç–æ —Å–º–æ—Ç—Ä–∏–º")
        self.wait()
        self.log("–î–µ–ª–∞–µ–º –≤–∏–¥ —á—Ç–æ –≤–≤–æ–¥–∏–º")
        self.wait()
        # –í–≤–µ–¥–µ–º –∫–∞–ø—á—É
        self.send(self.answer)

    def doControlStart(self, _match: []):
        """ –ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è """
        self.active = True
        self.send("+ –∑–∞–ø—É—â–µ–Ω", self.event.peer_id)

    def doControlStop(self, _match: []):
        """ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è """
        self.active = False
        self.send("+ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", self.event.peer_id)

    def doControlBooks(self, _match: []):
        """ –°–±–æ—Ä –≤—Å–µ—Ö –∫–Ω–∏–≥ """
        self.send("> —Å–æ–±–∏—Ä–∞—é...", self.event.peer_id)
        self.buildBooks()

    def doControlDrop(self, _match: []):
        """ –ü–µ—Ä–µ–¥–∞—á–∞ –ª—É—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥ """
        self.send("> —Å–¥–∞—é...", self.event.peer_id)
        self.dropItems()

    def doWaitResThread(self):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ """
        self.log("–ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞...")
        self.wait(True)
        # –ü–æ–¥–æ–∂–¥–µ–º —Å–±–æ—Ä —à–∫—É—Ä—ã –∏–ª–∏ —Ç—Ä–∞–≤—ã
        if self.drop == self.DROP_NONE:
            self.log("–ù–∏—á–µ–≥–æ –Ω–µ—Ç :(")
            self.doExploreDrop(None)
        return

    def doWaitRes(self, _match: [], callback: object):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã """
        self.state = self.STATE_EXPLORE
        self.match = _match
        self.drop = self.DROP_NONE
        self.nextWay = callback
        Thread(target=self.doWaitResThread).start()

    def doRetrySend(self, _match: []):
        """ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ """
        self.sendAction(self.retry, True)

    def doLevel(self, _match: []):
        """ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–≥–∞ """
        return

    def doGoblin(self, _match: []):
        """ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–≥–∞ """
        self.sendAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

    def doInHome(self, _match: []):
        """ –í—Ö–æ–¥ –≤ –¥–æ–º """
        if self.injuries == 0:
            self.sendAction("–ü–æ–∫–∏–Ω—É—Ç—å –¥–æ–º")

    def doInjuriesStationary(self, _match: []):
        """ –í—Å–µ —Ç—Ä–∞–≤–º—ã –∏–∑–ª–µ—á–µ–Ω—ã """
        self.honger = 100
        self.injuries = 0
        # –í–µ—Ä–Ω–µ–º—Å—è –≤ –∫–æ–ª–æ–¥–µ—Ü –∏–ª–∏ —É–π–¥–µ–º —Å —Ñ–æ–Ω—Ç–∞–Ω–∞
        if "–ö—É—Ö–Ω—è" in self.actions:
            if self.config.constat:
                self.sendAction("–ö—É—Ö–Ω—è")
            else:
                self.doInHome(_match)
        else:
            self.doLeaveSomething(_match)

    def doInjuriesPartial(self, _match: []):
        """ –¢—Ä–∞–≤–º—ã –∏–∑–ª–µ—á–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ """
        self.injuries = max(0, self.injuries - self.toInt(_match[1]))

    def doInjuriesOne(self, _match: []):
        """ –û–¥–Ω–∞ —Ç—Ä–∞–≤–º–∞ –∏–∑–ª–µ—á–µ–Ω–∞ """
        self.injuries = max(0, self.injuries - 1)
        self.doExploreDrop(None)

    def doInjuriesFull(self, _match: []):
        """ –í—Å–µ —Ç—Ä–∞–≤–º—ã –∏–∑–ª–µ—á–µ–Ω—ã """
        self.injuries = 0

    def doInjuriesUpdate(self, _match: []):
        """ –£—á–µ—Ç —Ç—Ä–∞–≤–º –ø–æ—Å–ª–µ –∫–æ—Å—Ç—Ä–∞ """
        self.injuries = self.toInt(_match[1])

    def doTrader(self, _match: []):
        """ –ü—Ä–æ–¥–∞–≤–µ—Ü (–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è, –î—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä, –£–π—Ç–∏) """
        if self.config.trader == 0:
            self.sendAction("–£–π—Ç–∏")
        # –ö—É–ø–∏—Ç—å
        elif self.config.trader == 1:
            self.sendAction("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
        # –£–≤–µ–¥–æ–º–∏—Ç—å
        elif self.config.trader == 2:
            self.alert("Walker trader")

    def doWaterHerbPour(self, _match: []):
        """ –ü–æ–ª–∏–≤ —à–∞–≥ 1 """
        self.sendAction("–ü–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")

    def doWaterHerbWait(self, _match: []):
        """ –ü–æ–ª–∏–≤ —à–∞–≥ 2 """
        self.sendAction("–ñ–¥–∞—Ç—å")

    def doWaterHerbLeave(self, _match: []):
        """ –ü–æ–ª–∏–≤ —à–∞–≥ 3 """
        self.sendAction("–£–π—Ç–∏")

    def doHunterView(self, _match: []):
        """ –û–±–∑–æ—Ä –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ """
        self.reputation = self.toInt(_match[2])
        self.tasksCount = self.toInt(_match[3])
        self.tasksList = []
        self.tasksDone = False
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.state == self.STATE_DUMP:
            self.state = self.STATE_HUNTER_TROPH
            # –ü–æ–∏—â–µ–º –∑–∞–¥–∞–Ω–∏—è
            if (self.tasksCount > 0) and (_match[1] == "–Ω–µ—Ç"):
                return self.sendAction("–î–æ—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π")
            else:
                return self.sendAction("–û–±–º–µ–Ω —Ç—Ä–æ—Ñ–µ–µ–≤")
        # –û–±–º–µ–Ω —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        elif self.state == self.STATE_HUNTER_TROPH:
            return self.sendAction("–õ–∞–≤–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏")
        # –í –∏—Ç–æ–≥–µ –Ω–∞–∑–∞–¥
        self.sendAction("–í–µ—Ä–Ω—É—Ç—å—Å—è")

    def doHunterTaskShow(self, _match: []):
        """ –£—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π """
        self.tasksList.append([len(self.tasksList), _match[1]])
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ
        if len(self.tasksList) < min(3, self.tasksCount):
            return
        # –°–ø–∏—Å–∫–∏
        tmp_accept = []
        tmp_reject = []
        tmp_skip = ["(PvP)",
                    "–≤ —Ç–∞–≤–µ—Ä–Ω–µ",
                    "–≤–µ—Ä–Ω—É—Ç—å—Å—è –∂–∏–≤—ã–º",
                    "–¥–æ–±—ã—Ç—å –ø–µ—â–µ—Ä–Ω–æ–≥–æ",
                    "–æ—Ç—Ä–∞–∑–∏—Ç—å –≤ –æ—Å–∞–¥–µ",
                    "–ø–æ–π–º–∞—Ç—å —Ä—ã–±—É –≤–µ—Å–æ–º –±–æ–ª–µ–µ 6–∫–≥",
                    "–ø–æ–π–º–∞—Ç—å —Ä—ã–±—É –≤–µ—Å–æ–º –±–æ–ª–µ–µ 10–∫–≥",
                    "–ø—Ä–æ–π—Ç–∏ –ø–æ–¥–∑–µ–º–Ω—ã–π",
                    "–≤—ã–π—Ç–∏ –Ω–∞ —ç–ª–∏—Ç–Ω—É—é",
                    "–∫—É–ø–∏—Ç—å –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç"]
        # –†–∞–∑–¥–µ—Ä–±–∞–Ω–∏–º –≤ –º–∞—Å—Å–∏–≤
        for tmpAction in self.actions:
            if "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ" in tmpAction:
                tmp_accept.append(tmpAction)
            elif "–ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ" in tmpAction:
                tmp_reject.append(tmpAction)
        # –ü–æ–∏—â–µ–º —Å–º–µ–Ω—É –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        for tmp_index, tmp_text in self.tasksList:
            for tmp_deceptor in tmp_skip:
                if not (tmp_deceptor in tmp_text):
                    continue
                self.tasksList = []
                # –ü–æ—á–∏—Å—Ç–∏–º
                for tmpAction in tmp_accept:
                    self.actions.pop(tmpAction)
                for tmpAction in tmp_reject:
                    self.actions.pop(tmpAction)
                # –û—Ç–ø—Ä–∞–≤–∏–º
                if len(tmp_reject) > 0:
                    return self.sendAction(tmp_reject[tmp_index], True)
                else:
                    return self.sendAction(tmp_accept[tmp_index], True)
                    # –ó–∞–º–µ–Ω –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–∏–±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        self.sendAction(tmp_accept[0])

    def doHunterTaskAccept(self, _match: []):
        """ –í–∑—è—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è """
        if len(self.tasksList) > 0:
            self.sendAction("–û–±–º–µ–Ω —Ç—Ä–æ—Ñ–µ–µ–≤")
        else:
            self.sendAction("–î–æ—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π")
        # –£–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, —Ç.–∫.  –≤–∑—è—Ç–∞—è —É–º–µ–Ω—å—à–∞–µ—Ç —Å–ø–∏—Å–æ–∫
        self.tasksCount -= 1

    def doHunterTroph(self, _match: []):
        """ –û–±–º–µ–Ω —Ç—Ä–æ—Ñ–µ–µ–≤ """
        self.troph = 0
        self.inventory = 100
        self.sendAction("–û–±—ã—á–Ω—ã–µ —Ç—Ä–æ—Ñ–µ–∏")
        self.sendAction("–û—Ö–æ—Ç–Ω–∏—á—å–∏ —Ç—Ä–æ—Ñ–µ–∏")
        self.sendAction("–ù–∞–∑–∞–¥")

    def doHunterStats(self, _match: []):
        """ –ü–æ–∫—É–ø–∫–∞ —Å—Ç–∞—Ç """
        tmpHave = self.toInt(_match[7])
        tmpSort = [[self.toInt(_match[2]), 1],
                   [self.toInt(_match[4]), 3],
                   [self.toInt(_match[6]), 5]]
        tmpSort.sort()
        # –ü–æ–∏—â–µ–º
        if tmpHave >= tmpSort[0][0]:
            self.sendAction(_match[tmpSort[0][1]])
        # –í–µ—Ä–Ω–µ–º—Å—è
        self.state = self.STATE_NONE
        self.sendAction("–ù–∞–∑–∞–¥")

    def doBackToHome(self, _match: []):
        """ –í—Ö–æ–¥ –¥–æ–º–æ–π """
        # –•–∏–ª –≤ –¥–æ–º–µ
        if self.injuries >= self.config.injuriesForHome:
            self.sendAction("–°–≤–æ–π –¥–æ–º")
        else:
            self.sendAction("–ù–∞–∑–∞–¥")
        return

    def doBackToCitadel(self, _match: []):
        """ –í—Ö–æ–¥ –≤ —Ü–∏—Ç–∞–¥–µ–ª—å """
        # –•–æ—á–µ—Ç—Å—è —Å–ø–∞—Ç—å
        if self.state == self.STATE_SLEEP:
            return self.sendAction("–ü–æ—Ä—Ç–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª")
        # –•–æ—á–µ—Ç—Å—è –∫—É—à–∞—Ç—å
        if self.state == self.STATE_HONGER:
            return self.sendAction("–ü–æ—Ä—Ç–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª")
        # –°–¥–∞—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if self.state == self.STATE_DUMP:
            return self.sendAction("–ì–∏–ª—å–¥–∏—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤")
        # –•–∏–ª –≤ –¥–æ–º–µ
        if self.injuries >= self.config.injuriesForHome:
            return self.sendAction("–í–µ—Ä—Ö–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª")
        # –ù–∞–∑–∞–¥ –∫–∞—á–∞—Ç—å—Å—è
        self.sendAction("–í –∫–æ–ª–æ–¥–µ—Ü")

    def doLeaveHealing(self, _match: []):
        """ –û—Ç—Ö–∏–ª –≤ —Ñ–æ–Ω—Ç–∞–Ω–µ """
        self.sendAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

    def doLeaveHunt(self, _match: []):
        """ –£—Ö–æ–¥ —Å –æ—Ö–æ—Ç—ã """
        self.inventory = self.config.inventoryLow
        self.sendAction("–ü—Ä–µ—Ä–≤–∞—Ç—å –æ—Ö–æ—Ç—É")

    def doFisherLeave(self, _match: []):
        """ –£—Ö–æ–¥ —Å —Ä—ã–±–∞–ª–∫–∏ –µ—Å–ª–∏ –∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–∞–∂–∏–≤–∫–∞ """
        self.sendAction("–ü—Ä–µ—Ä–≤–∞—Ç—å")

    def doFisherFound(self, _match: []):
        """ –†—ã–±–∞ –Ω–∞–π–¥–µ–Ω–∞ """
        self.sendAction("–ü–æ–¥—Å–µ—á—å")

    def doFisher(self, _match: []):
        """ –õ–æ–≤–ª—è —Ä—ã–±—ã """
        if self.toInt(_match[1]) > 0:
            self.sendAction("–ó–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É")
        else:
            self.sendAction("–ü—Ä–µ—Ä–≤–∞—Ç—å —Ä—ã–±–∞–ª–∫—É")

    def doLeaveBattle(self, _match: []):
        """ –£—Ö–æ–¥ —Å –±–æ—è """
        self.sendAction("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")

    def doZeroInventory(self, _match: []):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—é–∫–∑–∞–∫–∞ """
        self.inventory = self.toInt(_match[1])
        if self.inventory <= 10:
            self.checkMaps()
        if self.inventory <= self.config.inventoryLow:
            self.alert("Walker inventory low")
        # –¶–≤–µ—Ç–æ—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if self.drop == self.DROP_WAIT:
            self.doExploreDrop(None)

    def doKitchenDone(self, _match: []):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫—É—Ö–Ω—é """
        if self.config.constat:
            self.sendAction("+50% –ø—Ä–æ–∫–∞—á–∫–∞ " + self.config.constat)

    def doKitchenLeave(self, _match: []):
        """ –í—ã—Ö–æ–¥ —Å –∫—É—Ö–Ω–∏ """
        self.sendAction("–ù–∞–∑–∞–¥")

    def doOutdoorStep(self, _match: []):
        """ –ó–∞–ø—É—Å–∫ –ø–æ—Ö–æ–¥–∞ –∑–∞ –≥–æ—Ä–æ–¥ """
        return

    def doResp(self, _match: []):
        """ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–æ—Å–∫—Ä–µ—Å–∞ """
        if "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" in self.actions:
            self.sendAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        elif "–û—Ç–¥—ã—Ö" in self.actions:
            self.sendAction("–û—Ç–¥—ã—Ö")

    def doRest(self, _match: []):
        """ –ú—è—Å–æ —É –∫–æ—Å—Ç—Ä–∞ """
        if "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∏—â—É" in self.actions:
            self.sendAction("–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∏—â—É")

    def doOutdoorBreak(self, _match: []):
        """ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ—Ö–æ–¥–∞ –∑–∞ –≥–æ—Ä–æ–¥ """
        self.sendAction("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥")

    def doCloakLow(self, _match: []):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ """
        self.cloaks = self.toInt(_match[1])
        if self.cloaks <= self.config.cloakLow:
            self.alert("Walker masks low")

    def doUseStand(self, _match: []):
        """ –°–º–µ–Ω–∞ —Å—Ç–æ–π–∫–∏ """
        self.sendAction(self.fight.myStand[1:])

    def doUseBottle(self, _match: []):
        """ –í—ã–ø–∏–≤–∞–Ω–∏–µ –∑–µ–ª—å—è, –Ω–µ –ø—å–µ—Ç—Å—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º –±–æ–µ —Å —ç–ª–∏—Ç–∫–æ–π """
        if not self.config.bottle(self.actions, self.sendAction):
            print(self.actions)
            self.alert("Walker not bottles found")
        return

    def doDice(self, _match: []):
        """ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ (–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏, –£–π—Ç–∏) """
        if self.config.rollDice:
            self.sendAction("–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏")
        else:
            self.sendAction("–£–π—Ç–∏")

    def doSmug(self, _match: []):
        """ –ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç """
        self.sendAction("–ü—Ä–æ–¥–∞—Ç—å —Ç—Ä–æ—Ñ–µ–∏")

    def doTaskDone(self, _match: []):
        """ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ """
        self.tasksDone = True

    def doTradeTown(self, _match: []):
        """ –í—Ö–æ–¥ –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–∞–π–æ–Ω """
        if self.state == self.STATE_SLEEP:
            self.sendAction("–¢–∞–≤–µ—Ä–Ω–∞")
        elif self.state == self.STATE_HONGER:
            self.sendAction("–¢–∞–≤–µ—Ä–Ω–∞")
        else:
            self.sendAction("–í–µ—Ä–Ω—É—Ç—å—Å—è")

    def doTradeTavern(self, _match: []):
        """ –í—Ö–æ–¥ –≤ —Ç–∞–≤–µ—Ä–Ω—É """
        if self.state == self.STATE_SLEEP:
            self.sendAction("–£–±–æ—Ä–∫–∞")
        elif self.state == self.STATE_HONGER:
            self.sendAction("–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É")
        else:
            self.sendAction("–í–µ—Ä–Ω—É—Ç—å—Å—è")

    def doTradeSleep(self, _match: []):
        """ –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ """
        self.state = self.STATE_NONE
        self.injuries = self.config.injuriesForHome
        self.sendAction("–ü—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")

    def doTradeMenu(self, _match: []):
        """ –í—ã–±–æ—Ä –µ–¥—ã """
        self.state = self.STATE_DUMP
        self.sendAction("–î–µ—à–µ–≤—ã–π –æ–±–µ–¥")

    def doTradeMenuAccept(self, _match: []):
        """ –£—Å–ø–µ—Ö –ø–µ—Ä–µ–∫—É—Å–∞ """
        self.honger = 100
        self.hongerTime = datetime.today() + timedelta(hours=4)
        # –í–µ—Ä–Ω–µ–º—Å—è
        self.sendAction("–ù–∞–∑–∞–¥")

    def doTradeMenuDecline(self, _match: []):
        """ –ù–µ—É—Å–ø–µ—Ö –ø–µ—Ä–µ–∫—É—Å–∞ """
        tmpHours = self.toInt(_match[1])
        tmpMins = self.toInt(_match[2])
        tmpSecs = self.toInt(_match[3])
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á—Ç–æ–±—ã –Ω–µ —Ü–∏–∫–ª–∏—Ç—å—Å—è
        self.honger = 100
        self.hongerTime = datetime.today() + timedelta(hours=tmpHours, minutes=tmpMins, seconds=tmpSecs)
        # –í–µ—Ä–Ω–µ–º—Å—è
        self.sendAction("–ù–∞–∑–∞–¥")

    def doClosedDoor(self, _match: []):
        """ –ó–∞–ø–µ—Ä—Ç–∞—è –¥–≤–µ—Ä—å """
        if "–û—Ç–∫—Ä—ã—Ç—å —Å–∏–ª–æ–π" in self.actions:
            self.sendAction("–û—Ç–∫—Ä—ã—Ç—å —Å–∏–ª–æ–π")
        else:
            self.sendAction("–í—Å—Ç–∞–≤–∏—Ç—å –∫–∞–º–µ–Ω—å —Å—É–¥—å–±—ã")

    def doBeginHunt(self, _match: []):
        """ –û—Ç–º–µ–Ω–∞ –æ—Ö–æ—Ç—ã """
        if self.config.hunting == 0:
            self.doLeaveHunt(_match)

    def doBeginRuins(self, _match: []):
        """ –£—Ö–æ–¥ —Å –ø–æ–∏—Å–∫–æ–≤ """
        if self.config.searching == 0:
            self.doLeaveRuins(_match)

    def doBeginWork(self, _match: []):
        """ –£—Ö–æ–¥ —Å —Ä–∞–±–æ—Ç—ã """
        if self.state == self.STATE_SLEEP:
            return
        if self.config.working == 0:
            self.doLeaveSomething(_match)

    def doLeaveRuins(self, _match: []):
        """ –ü–æ–∫–∏–¥–∞–Ω–∏–µ —Ä—É–∏–Ω """
        self.sendAction("–ü—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–∏—Å–∫")

    def doLeaveSomething(self, _match: []):
        """ –ü–æ–∫–∏–¥–∞–Ω–∏–µ —á–µ–≥–æ –ª–∏–±–æ """
        self.sendAction("–ü–æ–∫–∏–Ω—É—Ç—å")

    def doLeaveFontan(self, _match: []):
        """ –£—Ö–æ–¥ —Å —Ñ–æ–Ω—Ç–∞–Ω–∞ """
        self.injuries = self.toInt(_match[1])
        self.sendAction("–ù–∞–±—Ä–∞—Ç—å –≤–æ–¥—ã")
        # –ï—Å–ª–∏ —Ç—Ä–∞–≤–º –º–∞–ª–æ - –≤—ã—Ö–æ–¥–∏–º
        if self.injuries < self.config.injuriesForFountain:
            self.doLeaveSomething(_match)

    def doBeginLabirint(self, _match: []):
        """ –£—Ö–æ–¥ —Å –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ """
        if self.config.labirint == 0:
            return
        # –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞
        self.labData = [[-1 for _ in range(200)] for _ in range(200)]
        self.labX = 100
        self.labY = 100

    def doLabirint(self, _match: []):
        """ –£—Ö–æ–¥ —Å –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ """
        if self.config.labirint == 0:
            return self.doLeaveLabirint(_match)
        # –ó–∞–ø—É—Å–∫ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        if len(self.labData) == 1:
            self.doBeginLabirint(_match)
        # –ï—Å–ª–∏ –≤–µ—Ç–µ—Ä –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω - —É—á–∏—ã—Ç–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–¥–∏–º—ã–π
        if len(_match.regs) > 1:
            self.wing = _match[1]
        # –û–±–Ω—É–ª–∏–º
        tmp_vectors = []
        tmpPoints = [-1, 1]

        def dump():
            """ –ü–æ–¥—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã """
            for y in range(self.labY - 10, self.labY + 10):
                for x in range(self.labX - 10, self.labX + 10):
                    if self.labX == x and self.labY == y:
                        print("{:2d}^".format(self.labData[y][x]), end="")
                    elif self.labData[y][x] == -3:
                        print(" * ", end="")
                    elif self.labData[y][x] == -2:
                        print(" + ", end="")
                    elif self.labData[y][x] == -1:
                        print(" ` ", end="")
                    elif self.labData[y][x] == 0:
                        print(" # ", end="")
                    else:
                        print("{:2d} ".format(self.labData[y][x]), end="")
                print()

        def check(x, y, path, vs, points):
            """ –ü–æ–¥—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞ """
            tmp_path = "–ù–∞ " + path
            if not (tmp_path in self.actions) or (self.actions[tmp_path] == "negative"):
                return
            # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤
            tmp_val = self.labData[self.labY + y][self.labX + x]
            if tmp_val == 0:
                return
            # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
            tmp_vectors.append([tmp_val, x, y, path])
            if tmp_val < 0:
                points[1] = 0
                if vs in self.wing:
                    tmp_val = -2
                else:
                    tmp_val = -3
                self.labData[self.labY + y][self.labX + x] = tmp_val
            points[0] += 1

        # –ó–∞–ø–æ–ª–Ω–∏–º —Å—Ç–æ—Ä–æ–Ω—ã
        check(0, -1, "—Å–µ–≤–µ—Ä", "—é–≥", tmpPoints)
        check(0, +1, "—é–≥", "—Å–µ–≤–µ—Ä", tmpPoints)
        check(-1, 0, "–∑–∞–ø–∞–¥", "–≤–æ—Å—Ç–æ–∫", tmpPoints)
        check(+1, 0, "–≤–æ—Å—Ç–æ–∫", "–∑–∞–ø–∞–¥", tmpPoints)
        # –ö–ª–µ—Ç–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–∏–Ω—É—Å –≤—ã—Ö–æ–¥, –¥–ª—è —Ç—É–ø–∏–∫–∞ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º
        if tmpPoints[0] == 0:
            tmpPoints[1] = 0
        self.labData[self.labY][self.labX] = tmpPoints[0] - tmpPoints[1]
        # –í—ã–≤–µ–¥–µ–º
        dump()
        tmp_vectors.sort()
        # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫—É–¥–∞ –∏–¥—Ç–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ —Å –≤–µ—Ç—Ä–æ–º
        for tmpPoint, tmpX, tmpY, tmpPath in tmp_vectors:
            if tmpPoint < 0 and tmpPath in self.wing:
                self.labY += tmpY
                self.labX += tmpX
                return self.sendAction("–ù–∞ " + tmpPath)
        # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫—É–¥–∞ –∏–¥—Ç–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –±–µ–∑ –≤–µ—Ç—Ä–∞
        for tmpPoint, tmpX, tmpY, tmpPath in tmp_vectors:
            if tmpPoint < 0:
                self.labY += tmpY
                self.labX += tmpX
                return self.sendAction("–ù–∞ " + tmpPath)
        # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫—É–¥–∞ –∏–¥—Ç–∏ –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å –≤–µ—Ç—Ä–æ–º
        for tmpPoint, tmpX, tmpY, tmpPath in tmp_vectors:
            if tmpPath in self.wing:
                self.labY += tmpY
                self.labX += tmpX
                return self.sendAction("–ù–∞ " + tmpPath)
        # –ü–µ—Ä–µ–π–¥–µ–º –≤ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –±–µ–∑ –≤–µ—Ç—Ä–∞
        for tmpPoint, tmpX, tmpY, tmpPath in tmp_vectors:
            self.labY += tmpY
            self.labX += tmpX
            return self.sendAction("–ù–∞ " + tmpPath)

    def doLeaveLabirint(self, _match: []):
        """ –£—Ö–æ–¥ —Å –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ """
        self.sendAction("–ü–æ–∫–∏–Ω—É—Ç—å –ª–∞–±–∏—Ä–∏–Ω—Ç")

    def doTreasureChest(self, _match: []):
        """ –ù–∞–π–¥–µ–Ω —Å—É–Ω–¥—É–∫ """
        self.sendAction("–û—Ç–∫—Ä—ã—Ç—å")

    def doTreasureWall(self, _match: []):
        """ –°–æ–∫—Ä–æ–≤–∏—â–µ –≤ —Å—Ç–µ–Ω–µ """
        self.sendAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

    def doTrapEasy(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≤—É—à–∫–∏ –±–µ–∑ —É—Ä–æ–Ω–∞ """
        self.sendAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

    def doTrapHard(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≤—É—à–∫–∏ —Å —É—Ä–æ–Ω–æ–º """
        self.sendAction("–û—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è")

    def doFarmHerb(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∞ —Ç—Ä–∞–≤—ã """
        if self.config.gatherHell or not _match[1]:
            self.drop = self.DROP_WAIT
            self.sendAction("–°–æ–±—Ä–∞—Ç—å")
        return

    def doFarmRes(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–µ—Ä–µ–≤–∞, –∫–∞–º–Ω—è, –ª—å–Ω–∞ –∏ –∂–µ–ª–µ–∑–∞ """
        self.drop = self.DROP_SKIP
        self.sendAction("–î–æ–±—ã—Ç—å")

    def doFarmView(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ """
        if not ("–û—Å–º–æ—Ç—Ä–µ—Ç—å" in self.actions):
            return
        self.drop = self.DROP_SKIP
        self.sendAction("–û—Å–º–æ—Ç—Ä–µ—Ç—å")

    def doFarmCoat(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∞ —à–∫—É—Ä """
        self.drop = self.DROP_SKIP
        self.sendAction("–û—Å–≤–µ–∂–µ–≤–∞—Ç—å")

    def doFightDead(self, _match: []):
        """ –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ–∏–≥—Ä—ã—à–µ–º """
        self.updateInjuries(True)
        self.skipBattle = False
        self.state = self.STATE_NONE

    def doFightEnd(self, _match: []):
        """ –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –≤—ã–∏–≥—Ä—ã—à–µ–º """
        self.updateInjuries(_match[1])
        self.skipBattle = False
        self.state = self.STATE_NONE

    def doFightOnePunch(self, _match: []):
        """ –ù–∞–≤—ã–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∞—Ç–∞–∫–∞ —Å —Ä—É–∫–∏ """
        self.sendAction("–ê—Ç–∞–∫–∞")

    def doFightStand(self, _match: []):
        """ –°–º–µ–Ω–∞ –±–æ–µ–≤–æ–π —Å—Ç–æ–π–∫–∏ –æ—Ä—É–∂–∏—è """
        self.fight.isStand = False
        # –í –∑–∞—â–∏—Ç–Ω–æ–π —Å—Ç–æ–π–∫–µ –Ω–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if _match[1]:
            self.fight.myAccuracy = self.toInt(_match[1])
        # –ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
        self.doFightNext(_match)

    def doFightOneSkill(self, _match: []):
        """ –ë–æ–π –Ω–∞–¥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤ """
        self.fight.isStand = False
        self.doFightNext(_match)

    def doFightNoBag(self, _match: []):
        """ –ó–µ–ª—å—è –∫–æ–Ω—á–∏–ª–∏—Å—å """
        self.fight.myBag = False
        self.doFightNext(_match)

    def doFightPvpSkip(self, _match: []):
        """ –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–µ—Ä–µ–º–∏—Ä–∏—è """
        if not self.config.warrior:
            self.send("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")

    def doMushroom(self, _match: []):
        """ –°—ä–µ–¥–µ–Ω –≥—Ä–∏–± –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è """
        self.fight.myLoHp = self.toInt(_match[1])
        self.fight.myHiHp = self.toInt(_match[2])
        self.fight.myPercent = self.toInt(_match[3])
        self.doExploreDrop(None)

    def doNextLevel(self, _match: []):
        """ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º """
        self.nextLevel = True

    def doFlower(self, _match: []):
        """ –°—ä–µ–¥–µ–Ω —Ü–≤–µ—Ç–æ–∫ —Å –∫—Ä–∏—Å—Ç–∞–ª–æ–º """
        self.doExploreDrop(None)

    def doExploreDrop(self, _match: []):
        """ –ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–¥–±–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ """
        if not self.nextWay:
            return
        self.nextWay()
        self.nextWay = None

    def doExploreSpeed(self, _match: []):
        """ –£—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è """
        self.honger = self.toInt(_match[1])
        if _match[2]:
            self.sendAction("–û–±—ã—Å–∫–∞—Ç—å")
        return

    def doExplore(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º """

        def sub():
            """ Delayed action """
            if self.state == self.STATE_BATTLE:
                return
            # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ–Ω
            if self.config.sleepHour and (datetime.today() + timedelta(self.config.utc)).hour in range(self.config.sleepHour, self.config.sleepHour + 1):
                return self.goPortal(self.STATE_SLEEP)
            # –û–ø—Ä–µ–¥–µ–ª–∏–º –≥–æ–ª–æ–¥
            if self.honger <= self.config.honger and datetime.today() > self.hongerTime:
                return self.goPortal(self.STATE_HONGER)
            # –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            if self.tasksDone:
                return self.goPortal()
            # –õ–∏–º–∏—Ç —Ç—Ä–æ–ø
            if self.troph > self.config.trophLimit:
                return self.goPortal()
            # –û–ø—Ä–µ–¥–µ–ª–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            if self.inventory <= self.config.inventoryLow:
                return self.goPortal()
            # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç—Ä–∞–≤–º—ã
            if self.injuries >= self.config.injuriesForHome:
                return self.goPortal()
            # –ù—É–∂–Ω–æ –ª–∏ —Å–ø—É—Å–∫–∞—Ç—å—Å—è
            if (self.config.goDown or self.nextLevel) and ("–ì–ª—É–±–∂–µ" in self.actions) and (
                    self.actions["–ì–ª—É–±–∂–µ"] == "positive"):
                self.nextLevel = False
                return self.sendAction("–ì–ª—É–±–∂–µ")
            # –ù–∞–∂–º–µ–º
            if self.fight.myPercent > self.config.restHp:
                self.checkMaps()
                return self.sendAction("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å")
            else:
                return self.sendAction("–û—Ç–¥—ã—Ö")

        # –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.troph = self.toInt(_match[1])
        self.fight.myLoHp = self.toInt(_match[2])
        self.fight.myHiHp = self.toInt(_match[3])
        self.fight.myPercent = self.toInt(_match[4])
        # –ó–∞–ø—É—Å—Ç–∏–º –ø–æ—Ç–æ–∫ —Å –∫–∞–ª–ª–±–∞–∫–æ–º
        self.doWaitRes(_match, sub)

    def doFightPvp(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ–µ–≤–∫–∏ PVP """
        self.state = self.STATE_BATTLE
        self.match = _match
        self.fight.isInit = True
        self.fight.isPVP = True
        self.fight.isPeace = True
        self.fight.myBag = True
        self.fight.isStand = self.match[14]
        self.fight.enemyGuild = self.match[1]
        self.fight.enemyAttack = self.toInt(self.match[2])
        self.fight.enemyArmor = self.toInt(self.match[3])
        self.fight.myAccuracy = self.toInt(self.match[4])
        self.fight.myConcentration = self.toInt(self.match[5])
        self.fight.enemyLoHp = self.toInt(self.match[6])
        self.fight.enemyHiHp = self.toInt(self.match[7])
        self.fight.enemyRegen = self.toInt(self.match[8])
        self.fight.enemyPercent = self.toInt(self.match[9])
        self.fight.myLoHp = self.toInt(self.match[10])
        self.fight.myHiHp = self.toInt(self.match[11])
        self.fight.myRegen = self.toInt(self.match[12])
        self.fight.myPercent = self.toInt(self.match[13])
        # –ü—Ä–æ–≤–µ–¥–µ–º –±–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–π–∫–∞
        self.doFightNext(_match)

    def doFightPve(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ–µ–≤–∫–∏ PVE """
        self.state = self.STATE_BATTLE
        self.match = _match
        self.fight.myBag = True
        self.fight.isInit = True
        self.fight.isStand = True
        self.fight.isPVP = False
        self.fight.enemyLoHp = self.toInt(self.match[1])
        self.fight.enemyHiHp = self.toInt(self.match[2])
        self.fight.enemyPercent = self.toInt(self.match[3])
        self.fight.enemyAttack = self.toInt(self.match[4])
        self.fight.enemyArmor = self.toInt(self.match[5])
        self.fight.isElite = self.match[6] == "‚≠ê"
        self.fight.enemySize = self.toInt(self.match[7])
        self.fight.myLoHp = self.toInt(self.match[8])
        self.fight.myHiHp = self.toInt(self.match[9])
        self.fight.myPercent = self.toInt(self.match[10])
        self.fight.myConcentration = self.toInt(self.match[11])
        self.fight.myAccuracy = self.toInt(self.match[12])
        self.skipBattle = self.fight.isElite and (self.config.eliteChoice == 0)
        if self.skipBattle:
            return self.alert("Walker elite found")
        # –ü—Ä–æ–≤–µ–¥–µ–º –±–æ–π
        self.doFightNext(_match)

    def doFightStep(self, _match: []):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–µ–≤–∫–∏ PVE """
        self.state = self.STATE_BATTLE
        self.match = _match
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.fight.isInit = False
        self.fight.isStand = (not self.fight.isPVP and not self.match[6]) or (self.match[18])
        # –£–¥–∞–ª–∏–º –∫–Ω–æ–ø–∫–∏ —Å–∫–∏–ª–ª–æ–≤ –ø—Ä–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–∏ [6] –∏–ª–∏ –¥–æ–ø–æ–≤ –ø—Ä–∏ —Ä—ã–∫–µ [9]
        if (self.match[6]) or (self.match[9]):
            tmp_actions = {}
            for tmp_key, tmp_value in self.actions.items():
                tmp_add = (tmp_key == "–ë–ª–æ–∫ —â–∏—Ç–æ–º") or (tmp_key == "–Ø—Ä–∫–∏–π —Å–≤–µ—Ç") or (tmp_key == "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ")
                if tmp_add:
                    if not self.match[6]:
                        tmp_actions[tmp_key] = tmp_value
                else:
                    if (not self.match[9]) or (tmp_value != "primary"):
                        tmp_actions[tmp_key] = tmp_value
            self.actions = tmp_actions
        # –ü–µ—Ä–µ–±–µ—Ä–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if self.match[1]:
            self.fight.myAccuracy = self.toInt(self.match[1])
        if self.match[2]:
            self.fight.myConcentration = self.toInt(self.match[2])
        if self.match[3]:
            self.fight.myBag = False
        if self.match[4]:
            self.fight.enemyArmor = self.toInt(self.match[4])
        if self.match[5]:
            self.fight.enemyArmor = self.toInt(self.match[5])
        if self.match[7]:
            self.injuries += 1
        if self.match[8]:
            self.injuries += 1
        self.fight.enemyLoHp = self.toInt(self.match[10])
        self.fight.enemyHiHp = self.toInt(self.match[11])
        self.fight.enemyRegen = self.toInt(self.match[12])
        self.fight.enemyPercent = self.toInt(self.match[13])
        self.fight.myLoHp = self.toInt(self.match[14])
        self.fight.myHiHp = self.toInt(self.match[15])
        self.fight.myRegen = self.toInt(self.match[16])
        self.fight.myPercent = self.toInt(self.match[17])
        # –ü—Ä–æ–≤–µ–¥–µ–º –±–æ–π
        self.doFightNext(_match)

    def doFightNext(self, _match):
        """ –ü–æ–≤—Ç–æ—Ä —Ö–æ–¥–∞ """
        self.fight.myStand = self.getStand()
        if self.fight.isPVP:
            if not self.fight.myStand:
                return
            if self.fight.isPeace and not self.config.warrior:
                self.fight.isPeace = False
                self.sendAction("–ü–µ—Ä–µ–º–∏—Ä–∏–µ")
                self.sleep(random.randint(10000, 15000) // 1000, "–ø–µ—Ä–µ–º–∏—Ä–∏—è")
        # –ü—Ä–æ–≤–µ–¥–µ–º –±–æ–π
        if self.config.battle(self.actions, self.sendAction, self.fight):
            return
        # –ï—Å–ª–∏ –±–æ–π –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω - —É–≤–µ–¥–æ–º–∏–º–∏
        print(self.actions)
        self.alert("Walker no fight buttons found")
